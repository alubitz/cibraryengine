#extension GL_EXT_gpu_shader4 : enable

varying	vec3			normal, position;

uniform	sampler2D		diffuse, specular, normal_map;

const float near_plane = 0.1;
const float far_plane = 16384.0;
const float inv_near_plane = 1.0 / near_plane;
const float log_plane_ratio = log(far_plane * inv_near_plane) - 1.0;
const float inv_log_plane_ratio = 1.0 / log_plane_ratio;
const float inv_255 = 1.0 / 255.0;
const float inv_256 = 1.0 / 256.0;

vec3 distance_to_color(float dist)
{
	int tot = int(dist * 256.0);

	float a = (tot / 65536) % 256;
	float b = (tot / 256) % 256;
	float c = (tot / 1) % 256;

	return vec3(c, b, a) * inv_255;
}

vec3 fragmentNormal(sampler2D normal_map)
{
	vec3 grain_color = texture2D(normal_map, gl_TexCoord[0].xy).xyz;
	vec3 tangentSpaceNormal = normalize(grain_color * 2.0 - 1.0);

	vec3 n = normalize(normal);
	vec3 t = normalize(gl_TexCoord[1].xyz);
	vec3 b = -normalize(gl_TexCoord[2].xyz);

	vec3 vec = t * tangentSpaceNormal.x + b * tangentSpaceNormal.y + n * tangentSpaceNormal.z;
	return normalize(vec);
}

void main()
{
	vec3 uNorm = fragmentNormal(normal_map);

	// diffuse color (x3)
	gl_FragData[0] = vec4(texture2D(diffuse, gl_TexCoord[0].xy).xyz, 0.0);

	if(texture2D(diffuse, gl_TexCoord[0].xy).w < 0.5)
		discard;

	// normal (x3)
	gl_FragData[1] = vec4(uNorm * 0.5 + 0.5, 0.0);

	// specular color (x4)
	gl_FragData[2] = vec4(texture2D(specular, gl_TexCoord[0].xy).xyz, 0.0);

	// depth (x3)
	gl_FragData[3].xyz = distance_to_color(-position.z);
}