#define ENVIRONMENT_MAPPING 0

varying	vec3			position;

uniform	sampler2D		diffuse, normal, specular, depth;
uniform	samplerCube		ambient_cubemap, env_cubemap;
uniform	mat4			inv_view;

const float near_plane = 0.1;
const float far_plane = 16384.0;
const float log_plane_ratio = log(far_plane / near_plane) - 1.0;
const float inv_256 = 1.0 / 256.0;
const float inv_255 = 1.0 / 255.0;

float color_to_distance(vec3 color)
{
	color *= 255.0;
	float frac = color.z * 256.0 + color.y + color.x * inv_256;
	return frac;
}

vec3 cameraVecToWorld(vec3 v) { return (inv_view * vec4(v, 0.0)).xyz; }
vec3 cameraPosToWorld(vec3 v) { return (inv_view * vec4(v, 1.0)).xyz; }

void main()
{
	vec2 uv = gl_TexCoord[0].xy;

	vec4 diffuse_sample = texture2D(diffuse, uv);
	vec4 normal_sample = texture2D(normal, uv);
	vec4 specular_sample = texture2D(specular, uv);
	vec4 depth_sample = texture2D(depth, uv);

	vec3 emission_color = vec3(diffuse_sample.w, normal_sample.w, specular_sample.w);

	float z = color_to_distance(depth_sample.xyz);
	vec3 uPos = normalize(vec3(position.xy * z, -z) - cameraPosToWorld(vec3(0.0)));

	vec3 uNorm = normal_sample.xyz * 2.0 - 1.0;

	float eye_dot = dot(uNorm, uPos);
	vec3 uBounce = uPos - (2.0 * eye_dot) * uNorm;

	vec4 ambient_color = textureCube(ambient_cubemap, cameraVecToWorld(uNorm));
	vec4 env_color = textureCube(env_cubemap, cameraVecToWorld(uBounce));

	vec3 diffuse_color = diffuse_sample.xyz;
	vec3 specular_color = specular_sample.xyz;

	vec3 base_color = diffuse_color * (ambient_color.xyz) + emission_color;

	gl_FragColor.xyz = base_color;
	//gl_FragColor.xyz = vec3((depth_sample.z * 256 * 256 + depth_sample.y * 256 + depth_sample.x) * inv_256 * inv_256);
	gl_FragColor.w = 1.0;
}
