#extension GL_EXT_gpu_shader4 : enable

varying	vec3			position;

uniform	sampler2D		diffuse, normal, specular, depth;
uniform	sampler2D		shadow_depth;

uniform	mat4			inv_view;
uniform	mat4			shadow_matrix;

const float near_plane = 0.1;
const float far_plane = 16384.0;
const float log_plane_ratio = log(far_plane / near_plane) - 1.0;
const float inv_256 = 1.0 / 256.0;
const float inv_255 = 1.0 / 255.0;

float color_to_distance(vec3 color)
{
	color *= 255.0;
	float frac = color.z * 256.0 + color.y + color.x * inv_256;
	return frac;
}

vec3 cameraVecToWorld(vec3 v) { return (inv_view * vec4(v, 0.0)).xyz; }
vec3 cameraPosToWorld(vec3 v) { return (inv_view * vec4(v, 1.0)).xyz; }

void main()
{
	vec2 uv = gl_TexCoord[0].xy;

	vec4 depth_sample = texture2D(depth, uv);

	float z = color_to_distance(depth_sample.xyz);
	vec3 pos = vec3(position.xy * z, -z);
	vec3 uPos = normalize(pos - cameraPosToWorld(vec3(0.0)));



	vec3 uLight = normalize(gl_LightSource[0].position.xyz);

	vec2 shadow_coord = (vec4(cameraPosToWorld(pos), 1.0) * shadow_matrix).xy * 0.5 + 0.5;
	float out_of_region = length(shadow_coord - vec2(0.5)) > 0.5 ? 1.0 : 0.0;	//min(1.0, length(shadow_coord - vec2(0.5)) * 2.0);

	vec4 shadow_depth_sample = texture2D(shadow_depth, shadow_coord);

	/*
	float shadow_z = color_to_distance(shadow_depth_sample.xyz);

	float prox = dot(pos, uLight);


	float shadow_threshold = -3.0 * inv_256;
	float shadow_br = prox + shadow_z - 256.0 > shadow_threshold ? 1.0 : 0.0;
	float br = max(out_of_region, shadow_br);

	if(br > 0.0)
	{
	*/
		vec4 normal_sample = texture2D(normal, uv);
		vec4 diffuse_sample = texture2D(diffuse, uv);
		vec4 specular_sample = texture2D(specular, uv);

		vec3 uNorm = normal_sample.xyz * 2.0 - 1.0;

		float light_dot = dot(uNorm, uLight);
		float eye_dot = dot(uNorm, uPos);
		vec3 uBounce = uPos - (2.0 * eye_dot) * uNorm;

		float diffuse_amount = max(0.0, min(1.0, light_dot));

		float specular_dot = dot(uBounce, uLight);
		float specular_base = max(0.0, min(1.0, specular_dot));
		float specular_amount = pow(specular_base, 4.0);

		vec3 diffuse_color = diffuse_sample.xyz;
		vec3 specular_color = specular_sample.xyz;

		vec3 base_color = diffuse_color * diffuse_amount * gl_LightSource[0].diffuse.xyz + specular_color * specular_amount * gl_LightSource[0].specular.xyz;

		//gl_FragColor.xyz = base_color * br;
		gl_FragColor.xyz = base_color;
		gl_FragColor.w = 1.0;

	/*
	}
	else
		discard;
	*/
}