#extension GL_EXT_gpu_shader4 : enable

#define ENABLE_SHADOWS 1

varying	vec3			position;

uniform	sampler2D		diffuse, normal, specular, depth;

#if ENABLE_SHADOWS

	uniform	sampler2D		shadow_depth;
	uniform	mat4			shadow_matrix, inv_shadow_matrix;

	vec3 worldToShadow(vec3 v) { vec4 temp = vec4(v, 1.0) * shadow_matrix; return temp.xyz / temp.w; }
	vec3 shadowToWorld(vec3 v) { vec4 temp = vec4(v, 1.0) * inv_shadow_matrix; return temp.xyz / temp.w; }

#endif

uniform	mat4			inv_view_matrix;

const float inv_256 = 1.0 / 256.0;
const float inv_255 = 1.0 / 255.0;

float color_to_distance(vec3 color)
{
	color *= 255.0;
	float frac = color.z * 256.0 + color.y + color.x * inv_256;
	return frac;
}

vec3 cameraVecToWorld(vec3 v) { return (vec4(v, 0.0) * inv_view_matrix).xyz; }
vec3 cameraPosToWorld(vec3 v) { vec4 temp = vec4(v, 1.0) * inv_view_matrix; return temp.xyz / temp.w; }

float getUnshadowedAmount(vec3 uLight, vec3 world_pos, vec2 shadow_coord)
{
	vec4 shadow_depth_sample = texture2D(shadow_depth, shadow_coord.xy * 0.5 + 0.5);
	float shadow_z = color_to_distance(shadow_depth_sample.xyz);
	vec3 shadow_pos = shadowToWorld(vec3(shadow_coord.xy, -shadow_z));

	float distance_past_shadow = dot(cameraVecToWorld(uLight), shadow_pos - world_pos);

	float shadow_threshold = 0.0 * inv_256;
	return distance_past_shadow < shadow_threshold ? 1.0 : 0.0;
}

void main()
{
	gl_FragColor.w = 1.0;

	vec3 camera_position = cameraPosToWorld(vec3(0.0));

	vec2 uv = gl_TexCoord[0].xy;

	vec4 depth_sample = texture2D(depth, uv);
	float z = color_to_distance(depth_sample.xyz);

	vec3 pos = vec3(position.xy * z, -z);
	vec3 uPos = normalize(pos);

	vec3 world_pos = cameraPosToWorld(pos);
	vec3 uLight = normalize(gl_LightSource[0].position.xyz);

#if ENABLE_SHADOWS

	vec3 shadow_coord = worldToShadow(world_pos);
	float out_of_region = min(1.0, length(vec2(shadow_coord.x, shadow_coord.y)));

	const float soft_d = 1.0 / 4096.0;

	float shadow_br = 0.25 * (
		getUnshadowedAmount(uLight, world_pos, shadow_coord.xy + vec2(soft_d,	soft_d	))	+
		getUnshadowedAmount(uLight, world_pos, shadow_coord.xy + vec2(soft_d,	-soft_d	))	+
		getUnshadowedAmount(uLight, world_pos, shadow_coord.xy + vec2(-soft_d,	-soft_d	))	+
		getUnshadowedAmount(uLight, world_pos, shadow_coord.xy + vec2(-soft_d,	soft_d	)));

	float br = max(out_of_region, shadow_br);

	if(br > 0.0)
	{

#endif
		vec4 normal_sample = texture2D(normal, uv);
		vec4 diffuse_sample = texture2D(diffuse, uv);
		vec4 specular_sample = texture2D(specular, uv);

		vec3 uNorm = normal_sample.xyz * 2.0 - 1.0;

		float light_dot = dot(uNorm, uLight);
		float eye_dot = dot(uNorm, uPos);
		vec3 uBounce = uPos - (2.0 * eye_dot) * uNorm;

		float diffuse_amount = max(0.0, min(1.0, light_dot));

		float specular_dot = dot(uBounce, uLight);
		float specular_base = max(0.0, min(1.0, specular_dot));
		float specular_amount = pow(specular_base, 4.0);

		vec3 diffuse_color = diffuse_sample.xyz;
		vec3 specular_color = specular_sample.xyz;

		vec3 base_color = diffuse_color * diffuse_amount * gl_LightSource[0].diffuse.xyz + specular_color * specular_amount * gl_LightSource[0].specular.xyz;

#if ENABLE_SHADOWS

		gl_FragColor.xyz = base_color * br;
	}
	else
		discard;
#else
		gl_FragColor.xyz = base_color;
#endif

}