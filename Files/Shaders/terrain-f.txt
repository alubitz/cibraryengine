uniform	sampler2D		texture_a;
uniform	sampler2D		texture_b;
uniform	sampler2D		texture_c;
uniform	vec3			chunk_pos;

varying	vec3			normal, position;
varying	vec3			input_normal, vertex;
varying	vec3			mat_weights;

vec4 sampleTriplanar(sampler2D texture, vec3 sample_xyz)
{
	vec4 x_sample = texture2D(texture, sample_xyz.yz);
	vec4 y_sample = texture2D(texture, sample_xyz.xz);
	vec4 z_sample = texture2D(texture, sample_xyz.xy);

	return (x_sample * abs(input_normal.x) + y_sample * abs(input_normal.y) + z_sample * abs(input_normal.z)) / (abs(input_normal.x) + abs(input_normal.y) + abs(input_normal.z));
}

void main()
{
	vec3 uPos = normalize(position);
	vec3 uLight = normalize(gl_LightSource[0].position.xyz);

	vec3 uNorm = normalize(normal);

	float light_dot = dot(uNorm, uLight);
	float eye_dot = dot(uNorm, uPos);
	vec3 uBounce = uPos - (2.0 * eye_dot) * uNorm;

	float diffuse_amount = max(0.0, min(1.0, light_dot));

	float specular_dot = dot(uBounce, uLight);
	float specular_base = max(0.0, min(1.0, specular_dot));
	float specular_amount = pow(specular_base, 4.0);

	float light = diffuse_amount * 0.8 + 0.2;

	vec3 sample_xyz = (vertex + chunk_pos) / 10.0;

	vec4 diffuse_sample =	sampleTriplanar(texture_a, sample_xyz) * mat_weights[0] +
							sampleTriplanar(texture_b, sample_xyz) * mat_weights[1] + 
							sampleTriplanar(texture_c, sample_xyz) * mat_weights[2];

	vec3 base_color = diffuse_sample.xyz * light;

	gl_FragColor.xyz = base_color;
	gl_FragColor.w = 1.0;
}
