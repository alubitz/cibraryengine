
uniform samplerBuffer	constraint_data;

uniform int				velocity_data_size;
uniform samplerBuffer	velocity_data;

attribute ivec2 object_indices;

varying vec3 out_vel_a;
varying vec3 out_rot_a;

varying vec3 out_vel_b;
varying vec3 out_rot_b;

vec3 get_vel(int index) { return texelFetch(velocity_data, index + velocity_data_size).xyz; }
vec3 get_rot(int index) { return texelFetch(velocity_data, index).xyz; }

void main()
{
	out_vel_a = get_vel(object_indices[0]);
	out_rot_a = get_rot(object_indices[0]);

	out_rot_b = get_rot(object_indices[1]);
	out_vel_b = get_vel(object_indices[1]);

	// TODO: actually evaluate the constraints!
}
