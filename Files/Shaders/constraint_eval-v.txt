
uniform samplerBuffer	constraint_data;

uniform int				velocity_data_size;
uniform samplerBuffer	velocity_data;

attribute vec2 object_indices;

varying vec4 out_vel_a;
varying vec4 out_rot_a;

varying vec4 out_vel_b;
varying vec4 out_rot_b;

vec3 get_vel(int index) { return texelFetch(velocity_data, index + velocity_data_size).xyz; }
vec3 get_rot(int index) { return texelFetch(velocity_data, index).xyz; }

void main()
{
	int index_a = int(object_indices[0]);
	int index_b = int(object_indices[1]);

	out_vel_a = vec4(get_vel(index_a), 0.0);
	out_rot_a = vec4(get_rot(index_a), 0.0);

	out_vel_b = vec4(get_vel(index_b), 0.0);
	out_rot_b = vec4(get_rot(index_b), 0.0);

	// TODO: actually evaluate the constraints!
}
